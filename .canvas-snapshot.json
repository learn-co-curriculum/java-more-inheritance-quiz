{
  "quiz": {
    "id": 45552,
    "title": "Quiz 3 - More On Inheritance",
    "html_url": "https://learning.flatironschool.com/courses/6677/quizzes/45552",
    "mobile_url": "https://learning.flatironschool.com/courses/6677/quizzes/45552?force_user=1&persist_headless=1",
    "description": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"java-more-inheritance-quiz\"></div>\n<header class=\"fis-header\">\n  <a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/java-more-inheritance-quiz/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a>\n</header>\n\n<p>It's time to check your knowledge!\nNote any answers that were marked incorrect, so you can study the relevant\nmaterial and try this quiz again.</p>",
    "quiz_type": "assignment",
    "time_limit": null,
    "timer_autosubmit_disabled": false,
    "shuffle_answers": true,
    "show_correct_answers": true,
    "scoring_policy": "keep_highest",
    "allowed_attempts": 3,
    "one_question_at_a_time": true,
    "question_count": 7,
    "points_possible": 7.0,
    "cant_go_back": false,
    "access_code": null,
    "ip_filter": null,
    "due_at": null,
    "lock_at": null,
    "unlock_at": null,
    "published": false,
    "unpublishable": true,
    "locked_for_user": true,
    "lock_info": {
      "missing_permission": "participate_as_student",
      "asset_string": "quizzes:quiz_45552"
    },
    "lock_explanation": "This quiz is currently locked.",
    "hide_results": null,
    "show_correct_answers_at": null,
    "hide_correct_answers_at": null,
    "all_dates": [
      {
        "due_at": null,
        "unlock_at": null,
        "lock_at": null,
        "base": true
      }
    ],
    "can_unpublish": true,
    "can_update": true,
    "require_lockdown_browser": false,
    "require_lockdown_browser_for_results": false,
    "require_lockdown_browser_monitor": false,
    "lockdown_browser_monitor_data": null,
    "speed_grader_url": null,
    "permissions": {
      "manage": true,
      "read": true,
      "create": true,
      "update": true,
      "submit": true,
      "preview": true,
      "delete": true,
      "read_statistics": true,
      "grade": true,
      "review_grades": true,
      "view_answer_audits": true
    },
    "quiz_reports_url": "https://learning.flatironschool.com/api/v1/courses/6677/quizzes/45552/reports",
    "quiz_statistics_url": "https://learning.flatironschool.com/api/v1/courses/6677/quizzes/45552/statistics",
    "message_students_url": "https://learning.flatironschool.com/api/v1/courses/6677/quizzes/45552/submission_users/message",
    "section_count": 1,
    "important_dates": false,
    "quiz_submission_versions_html_url": "https://learning.flatironschool.com/courses/6677/quizzes/45552/submission_versions",
    "assignment_id": 234393,
    "one_time_results": false,
    "only_visible_to_overrides": false,
    "assignment_group_id": 20002,
    "show_correct_answers_last_attempt": true,
    "version_number": 4,
    "has_access_code": false,
    "post_to_sis": false,
    "migration_id": null,
    "in_paced_course": false,
    "question_types": [

    ]
  },
  "questions": [
    {
      "id": 310347,
      "quiz_id": 45552,
      "quiz_group_id": null,
      "assessment_question_id": 540654,
      "position": null,
      "question_name": "Constructors and Inheritance",
      "question_type": "multiple_choice_question",
      "question_text": "<div class=\"highlight\"><pre class=\"highlight java\"><code><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Vehicle</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"nf\">Vehicle</span><span class=\"o\">()</span> <span class=\"o\">{</span> <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"Vehicle()\"</span><span class=\"o\">);}</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Car</span> <span class=\"kd\">extends</span> <span class=\"nc\">Vehicle</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"nf\">Car</span><span class=\"o\">()</span> <span class=\"o\">{</span><span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"Car()\"</span><span class=\"o\">);}</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Main</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"nc\">Vehicle</span> <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Vehicle</span><span class=\"o\">();</span>\n        <span class=\"nc\">Car</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Car</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>What is printed when the <code>main()</code> method executes?</p>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "",
      "neutral_comments": "",
      "correct_comments_html": "",
      "incorrect_comments_html": "",
      "neutral_comments_html": "",
      "answers": [
        {
          "id": 6099,
          "text": "",
          "html": "<p>Vehicle()<br>\nCar()<br>\nVehicle()</p>",
          "comments": "",
          "comments_html": "<p>Incorrect. The compiler adds an implicit call <code>super();</code> as the first statement in the <code>Car()</code> constructor.\nThe correct output is:<br>\nVehicle()<br>\nVehicle()<br>\nCar()</p>",
          "weight": 0.0
        },
        {
          "id": 9066,
          "text": "",
          "html": "<p>Vehicle()<br>\nCar()</p>",
          "comments": "",
          "comments_html": "<p>Incorrect. The compiler adds an implicit call <code>super();</code> as the first statement in the <code>Car()</code> constructor.\nThe correct output is:<br>\nVehicle()<br>\nVehicle()<br>\nCar()</p>",
          "weight": 0.0
        },
        {
          "id": 5716,
          "text": "",
          "html": "<p>Vehicle()<br>\nVehicle()<br>\nCar()</p>",
          "comments": "",
          "comments_html": "<p>Correct! The compiler adds an implicit call <code>super();</code> as the first statement in the <code>Car()</code> constructor.</p>",
          "weight": 100.0
        },
        {
          "id": 2057,
          "text": "",
          "html": "<p>Car()<br>\nVehicle()<br>\nCar()</p>",
          "comments": "",
          "comments_html": "<p>Incorrect. The compiler adds an implicit call <code>super();</code> as the first statement in the <code>Car()</code> constructor.\nThe correct output is:<br>\nVehicle()<br>\nVehicle()<br>\nCar()</p>",
          "weight": 0.0
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": null,
      "matching_answer_incorrect_matches": null
    },
    {
      "id": 310348,
      "quiz_id": 45552,
      "quiz_group_id": null,
      "assessment_question_id": 540655,
      "position": null,
      "question_name": "Constructors and Inheritance",
      "question_type": "multiple_choice_question",
      "question_text": "<p>Why won't the <code>Car</code> constructor compile?</p>\n<div class=\"highlight\"><pre class=\"highlight java\"><code><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Vehicle</span> <span class=\"o\">{</span>\n    <span class=\"kd\">private</span> <span class=\"nc\">String</span> <span class=\"n\">vin</span><span class=\"o\">;</span>\n\n    <span class=\"kd\">public</span> <span class=\"nf\">Vehicle</span><span class=\"o\">(</span><span class=\"nc\">String</span> <span class=\"n\">vin</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">vin</span> <span class=\"o\">=</span> <span class=\"n\">vin</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"nc\">String</span> <span class=\"nf\">getVin</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">vin</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">setVin</span><span class=\"o\">(</span><span class=\"nc\">String</span> <span class=\"n\">vin</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">vin</span> <span class=\"o\">=</span> <span class=\"n\">vin</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Car</span> <span class=\"kd\">extends</span> <span class=\"nc\">Vehicle</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"nf\">Car</span><span class=\"o\">(</span><span class=\"nc\">String</span> <span class=\"n\">vin</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">setVin</span><span class=\"o\">(</span><span class=\"n\">vin</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "",
      "neutral_comments": "",
      "correct_comments_html": "",
      "incorrect_comments_html": "",
      "neutral_comments_html": "",
      "answers": [
        {
          "id": 2231,
          "text": "",
          "html": "<p>The <code>Vehicle</code> class does not have a no-args constructor.</p>",
          "comments": "",
          "comments_html": "<p>Correct! The compiler adds an implicit call <code>super();</code> as the first statement in the <code>Car()</code> constructor.\nThe <code>Vehicle</code> class does not have a no-args constructor.</p>",
          "weight": 100.0
        },
        {
          "id": 6411,
          "text": "",
          "html": "<p>The statement in the <code>Car</code> constructor should be <code>super.setVin(vin);</code></p>",
          "comments": "",
          "comments_html": "<p>Incorrect. The compiler adds an implicit call <code>super();</code> as the first statement in the <code>Car()</code> constructor.\nThe <code>Vehicle</code> class does not have a no-args constructor.</p>",
          "weight": 0.0
        },
        {
          "id": 7538,
          "text": "",
          "html": "<p>The statement in the <code>Car</code> constructor should be <code>setVin(vin);</code></p>",
          "comments": "",
          "comments_html": "<p>Incorrect. The compiler adds an implicit call <code>super();</code> as the first statement in the <code>Car()</code> constructor.\nThe <code>Vehicle</code> class does not have a no-args constructor.</p>",
          "weight": 0.0
        },
        {
          "id": 5091,
          "text": "",
          "html": "<p>The first statement in the <code>Car</code> constructor should be <code>super();</code></p>",
          "comments": "",
          "comments_html": "<p>Incorrect. The compiler adds an implicit call <code>super();</code> as the first statement in the <code>Car()</code> constructor.\nThe <code>Vehicle</code> class does not have a no-args constructor.</p>",
          "weight": 0.0
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": null,
      "matching_answer_incorrect_matches": null
    },
    {
      "id": 310349,
      "quiz_id": 45552,
      "quiz_group_id": null,
      "assessment_question_id": 540656,
      "position": null,
      "question_name": "Access Modifiers and Inheritance",
      "question_type": "true_false_question",
      "question_text": "<div class=\"highlight\"><pre class=\"highlight java\"><code><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Vehicle</span> <span class=\"o\">{</span>\n    <span class=\"kd\">protected</span> <span class=\"nc\">String</span> <span class=\"n\">vin</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Car</span> <span class=\"kd\">extends</span> <span class=\"nc\">Vehicle</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">printVin</span><span class=\"o\">(){</span>\n        <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">vin</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>The <code>printVin()</code> method can access the inherited <code>vin</code> field without a compiler error.</p>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "",
      "neutral_comments": "",
      "correct_comments_html": "",
      "incorrect_comments_html": "",
      "neutral_comments_html": "",
      "answers": [
        {
          "comments": "",
          "comments_html": "<p>Correct! The <code>protected</code> access modifier allows subclasses to access the field on the same object.</p>",
          "text": "True",
          "weight": 100,
          "id": 1816
        },
        {
          "comments": "",
          "comments_html": "<p>Incorrect. The <code>protected</code> access modifier allows subclasses to access the field on the same object.</p>",
          "text": "False",
          "weight": 0,
          "id": 5507
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": null,
      "matching_answer_incorrect_matches": null
    },
    {
      "id": 310350,
      "quiz_id": 45552,
      "quiz_group_id": null,
      "assessment_question_id": 540657,
      "position": null,
      "question_name": "Throwable",
      "question_type": "matching_question",
      "question_text": "<p>Match the class with the correct description.</p>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "",
      "neutral_comments": "",
      "correct_comments_html": "",
      "incorrect_comments_html": "",
      "neutral_comments_html": "",
      "answers": [
        {
          "id": 2717,
          "text": "Throwable",
          "left": "Throwable",
          "right": "The superclass of all errors and exceptions in the Java language.",
          "comments": "",
          "comments_html": "",
          "match_id": 2578
        },
        {
          "id": 3367,
          "text": "Error",
          "left": "Error",
          "right": "A serious problem that a program can't recover from such as running out of memory.",
          "comments": "",
          "comments_html": "",
          "match_id": 1804
        },
        {
          "id": 9417,
          "text": "Exception",
          "left": "Exception",
          "right": "Represent problems that must be checked for at compile-time and handled with program logic.",
          "comments": "",
          "comments_html": "",
          "match_id": 3007
        },
        {
          "id": 5835,
          "text": "RuntimeException",
          "left": "RuntimeException",
          "right": "Represent logic errors that may occur anytime during program execution and thus are not explicitly checked for in the code.",
          "comments": "",
          "comments_html": "",
          "match_id": 2142
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": [
        {
          "text": "The superclass of all errors and exceptions in the Java language.",
          "match_id": 2578
        },
        {
          "text": "A serious problem that a program can't recover from such as running out of memory.",
          "match_id": 1804
        },
        {
          "text": "Represent problems that must be checked for at compile-time and handled with program logic.",
          "match_id": 3007
        },
        {
          "text": "Represent logic errors that may occur anytime during program execution and thus are not explicitly checked for in the code.",
          "match_id": 2142
        },
        {
          "text": "I don't know.",
          "match_id": 8330
        }
      ],
      "matching_answer_incorrect_matches": "I don't know."
    },
    {
      "id": 310351,
      "quiz_id": 45552,
      "quiz_group_id": null,
      "assessment_question_id": 540658,
      "position": null,
      "question_name": "Exception Classes",
      "question_type": "true_false_question",
      "question_text": "<div class=\"highlight\"><pre class=\"highlight java\"><code><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">OddNumberException</span> <span class=\"kd\">extends</span> <span class=\"nc\">RuntimeException</span> <span class=\"o\">{</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Main</span> <span class=\"o\">{</span>\n\n  <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">checkit</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"kd\">throws</span> <span class=\"nc\">OddNumberException</span> <span class=\"o\">{</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nf\">OddNumberException</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n    <span class=\"k\">else</span> <span class=\"o\">{</span>\n      <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"s\">\" is not odd\"</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"n\">checkit</span><span class=\"o\">(</span><span class=\"mi\">7</span><span class=\"o\">);</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>The statement <code>checkit(7);</code> needs to be in a <code>try-catch</code> block in order for the <code>main()</code> method\nto compile.</p>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "",
      "neutral_comments": "",
      "correct_comments_html": "",
      "incorrect_comments_html": "",
      "neutral_comments_html": "",
      "answers": [
        {
          "comments": "",
          "comments_html": "<p>Incorrect. The  <code>OddNumberException</code> class extends <code>RuntimeException</code>\nand therefore is an unchecked exception that does not need to be handled.</p>",
          "text": "True",
          "weight": 0,
          "id": 8575
        },
        {
          "comments": "",
          "comments_html": "<p>Correct! The  <code>OddNumberException</code> class extends <code>RuntimeException</code>\nand therefore is an unchecked exception that does not need to be handled.</p>",
          "text": "False",
          "weight": 100,
          "id": 2538
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": null,
      "matching_answer_incorrect_matches": null
    }
  ]
}